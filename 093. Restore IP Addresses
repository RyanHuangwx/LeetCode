Given a string containing only digits, restore it by returning all possible valid IP address combinations.

For example:
Given "25525511135",

return ["255.255.11.135", "255.255.111.35"]. (Order does not matter)


class Solution:
    # @param s, a string
    # @return a list of strings
    def isValidIP(self,s):
        if len(s)>0 and len(s)<=3:
            if s[0]!='0' and len(s)>1 or len(s)==1:
                if int(s)<=255:
                    return True
        return False
        
    def restoreIpAddresses(self, s):
        l=len(s)
        res,iptmp=[],[]
        for i in xrange(min(3,l-3)):
            for j in xrange(i+1,min(i+4,l-2)):
                for k in xrange(j+1,min(j+4,l-1)):
                    iptmp.extend([s[:i+1],s[i+1:j+1],s[j+1:k+1],s[k+1:]])
                    print iptmp
                    if self.isValidIP(iptmp[0]) and self.isValidIP(iptmp[1]) and self.isValidIP(iptmp[2]) and self.isValidIP(iptmp[3]):
                        res.append('.'.join(iptmp))
                    iptmp=[]
        return res


