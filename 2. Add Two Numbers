You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    # @return a ListNode
    def addTwoNumbers(self, l1, l2):
        head=ListNode(0)
        result=head
        carry=0
        while l1!=None or l2!=None or carry>0:
            sum=(l1.val if l1 else 0)+(l2.val if l2 else 0)+carry    # if else表达式相当于 ? :
            (quo,rem)=divmod(sum,10)            #divmod()去商和余数，支持复数
            carry=quo
            result.next=result=ListNode(rem)    #注意python中的这种用法！
            l1=l1.next if l1 else l1
            l2=l2.next if l2 else l2
        return head.next
