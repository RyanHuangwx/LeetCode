Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

# 暴力解法 O(n3)
# 滑动窗口 O(n) 

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        start = 0
        char = {}
        longest = 0
        for end in range(len(s)):
            # 如果找到重复字符，则把start指针后移到重复字符的下一位
            if s[end] in char:
                start = max(start, char[s[end]])
            longest = max(longest, end - start + 1)
            char[s[end]] = end + 1
        return longest
